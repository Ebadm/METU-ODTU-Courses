#Muhammad Ebad Malik
#2414860
#331 arclab part a (i)


.pos 0:
	irmovq Stack, %rsp			#setup stack ptr
	irmovq root, %rdi			#setup func parameter
	call max_bst				#call func
	halt					#end
	
max_bst:
	xorq %rax, %rax 			#max = 0	
	andq %rdi, %rdi			#check if root null or not
	jne check				#if root != Null go to loop check
	ret
	
loop:
	mrmovq 16(%rdi), %rdi			#in loop: root = root->right
	
check:
	mrmovq 16(%rdi), %r8			#store root->right in r8
	andq %r8, %r8				#check if r8 is null or not
	jne loop				#if r8 not null go back to loop
	mrmovq (%rdi), %rax			#once root-right = null, max = root->value
	ret					#end


#sample binary search tree
.pos 0x200
root:
	.quad 17
	.quad node6
	.quad node24
node6:
	.quad 6
	.quad node4
	.quad node11
node4:
	.quad 4
	.quad node3
	.quad node5
node3:
	.quad 3
	.quad 0
	.quad 0
node5:
	.quad 5
	.quad 0 # Remember that 0 is null.
	.quad 0
node11:
	.quad 11
	.quad node8
	.quad 0
node8:
	.quad 8
	.quad 0
	.quad 0
node24:
	.quad 24
	.quad node19
	.quad node40
node19:
	.quad 19
	.quad 0
	.quad 0
node40:
	.quad 40
	.quad 0
	.quad node52
node52:
	.quad 52
	.quad 0
	.quad 0
	

# The stack starts here and grows to lower addresses
.pos 0x800
Stack:
